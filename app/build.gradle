plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs'
    id 'kotlin-android-extensions'
}

android {
    compileSdkVersion COMPILE_SDK_VERSION.toInteger()
    buildToolsVersion buildToolsVersion

    defaultConfig {
        applicationId "com.smb.smbappli cation"

        minSdkVersion MIN_SDK_VERSION.toInteger()
        targetSdkVersion TARGET_SDK_VERSION.toInteger()
        versionCode VERSION_CODE.toInteger()
        versionName VERSION_NAME

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled true
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}
kapt {
    generateStubs = true
}

/*jacoco {
    toolVersion = "0.7.4+"
}*/
repositories {
    mavenCentral()
}
dependencies {
    // cropper1  :imagepicker1
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(path: ':nasutils')

    // implementation "org.jetbrains.anko:anko:0.10.5"
    implementation 'org.apache.commons:commons-text:1.6'

    //Support libs
    implementation 'androidx.appcompat:appcompat:' + supportLibVersion
    implementation 'androidx.constraintlayout:constraintlayout:' + constraintLayoutVersion

    // Life cycle
    //implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:' + archLifecycleVersion
    //implementation 'androidx.lifecycle:lifecycle-livedata-ktx:' + archLifecycleVersion
    //implementation 'androidx.lifecycle:lifecycle-extensions:' + archLifecycleVersion
    //implementation 'androidx.lifecycle:lifecycle-common-java8:' + archLifecycleVersion
    kapt 'androidx.lifecycle:lifecycle-compiler:' + archLifecycleVersion

    // Room
    implementation 'androidx.room:room-runtime:' + archRoomVersion
    kapt 'androidx.room:room-compiler:' + archRoomVersion

    //Paging
    implementation 'androidx.paging:paging-runtime:' + archPaggingVersion

    //Navigation
    implementation 'androidx.navigation:navigation-fragment-ktx:' + archNavigationVersion
    implementation 'androidx.navigation:navigation-ui-ktx:' + archNavigationVersion

    // dependency injection- dragger 2
    implementation 'com.google.dagger:dagger:' + dagger_version
    implementation 'com.google.dagger:dagger-android:' + dagger_version
    implementation 'com.google.dagger:dagger-android-support:' + dagger_version
    kapt 'com.google.dagger:dagger-android-processor:' + dagger_version
    kapt 'com.google.dagger:dagger-compiler:' + dagger_version



    // Retrofit for api call
    implementation('com.squareup.retrofit2:retrofit:' + retrofitVersion) {
        exclude module: 'okhttp-ws'
    }
    implementation('com.squareup.retrofit2:converter-gson:' + retrofitVersion) {
        exclude module: 'okhttp-ws'
    }
    implementation 'com.squareup.okhttp3:logging-interceptor:' + okHttpVersion

    // Memory Leaks
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'
    // Optional, if you use support library fragments:
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3'

    // Testing - API LOG
    debugImplementation 'com.readystatesoftware.chuck:library:1.1.0'
    releaseImplementation 'com.readystatesoftware.chuck:library-no-op:1.1.0'

}
